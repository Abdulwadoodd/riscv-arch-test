
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rd == rs2 == rs3 != rs1, rs1==f13, rs2==f11, rs3==f11, rd==f11,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f13; op2:f11; op3:f11; dest:f11; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x44c54df4; valaddr_reg:x3; val_offset:0*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f11, f13, f11, f11, dyn, 0, 0, x3, 0*0 + 3*0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f14, rs2==f14, rs3==f7, rd==f17,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f14; op2:f14; op3:f7; dest:f17; op1val:0x7a26140b; op2val:0x7a26140b;
op3val:0x64000001; valaddr_reg:x3; val_offset:3*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f17, f14, f14, f7, dyn, 0, 0, x3, 3*0 + 3*0*FLEN/8, x4, x1, x2)

inst_2:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f6, rs2==f29, rs3==f12, rd==f12,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f6; op2:f29; op3:f12; dest:f12; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64000003; valaddr_reg:x3; val_offset:6*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f12, f6, f29, f12, dyn, 0, 0, x3, 6*0 + 3*0*FLEN/8, x4, x1, x2)

inst_3:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f10, rs2==f2, rs3==f2, rd==f4,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f10; op2:f2; op3:f2; dest:f4; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x44c54df4; valaddr_reg:x3; val_offset:9*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f4, f10, f2, f2, dyn, 0, 0, x3, 9*0 + 3*0*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f28, rs2==f12, rs3==f30, rd==f28,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f28; op2:f12; op3:f30; dest:f28; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x6400000f; valaddr_reg:x3; val_offset:12*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f28, f28, f12, f30, dyn, 0, 0, x3, 12*0 + 3*0*FLEN/8, x4, x1, x2)

inst_5:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f12, rs2==f30, rs3==f27, rd==f18,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f12; op2:f30; op3:f27; dest:f18; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x6400001f; valaddr_reg:x3; val_offset:15*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f18, f12, f30, f27, dyn, 0, 0, x3, 15*0 + 3*0*FLEN/8, x4, x1, x2)

inst_6:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f0, rs2==f5, rs3==f29, rd==f5,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f0; op2:f5; op3:f29; dest:f5; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x6400003f; valaddr_reg:x3; val_offset:18*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f5, f0, f5, f29, dyn, 0, 0, x3, 18*0 + 3*0*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 == rd != rs3, rs1==f21, rs2==f21, rs3==f10, rd==f21,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f21; op2:f21; op3:f10; dest:f21; op1val:0x7a26140b; op2val:0x7a26140b;
op3val:0x6400007f; valaddr_reg:x3; val_offset:21*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f21, f21, f21, f10, dyn, 0, 0, x3, 21*0 + 3*0*FLEN/8, x4, x1, x2)

inst_8:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f22, rs2==f15, rs3==f22, rd==f23,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f22; op2:f15; op3:f22; dest:f23; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7a26140b; valaddr_reg:x3; val_offset:24*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f23, f22, f15, f22, dyn, 0, 0, x3, 24*0 + 3*0*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f15, rs2==f6, rs3==f15, rd==f15,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f15; op2:f6; op3:f15; dest:f15; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7a26140b; valaddr_reg:x3; val_offset:27*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f15, f15, f6, f15, dyn, 0, 0, x3, 27*0 + 3*0*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs2 == rs3 != rd, rs1==f23, rs2==f23, rs3==f23, rd==f29,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f23; op2:f23; op3:f23; dest:f29; op1val:0x7a26140b; op2val:0x7a26140b;
op3val:0x7a26140b; valaddr_reg:x3; val_offset:30*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f29, f23, f23, f23, dyn, 0, 0, x3, 30*0 + 3*0*FLEN/8, x4, x1, x2)

inst_11:
// rs1 == rs2 == rs3 == rd, rs1==f25, rs2==f25, rs3==f25, rd==f25,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f25; op2:f25; op3:f25; dest:f25; op1val:0x7a26140b; op2val:0x7a26140b;
op3val:0x7a26140b; valaddr_reg:x3; val_offset:33*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f25, f25, f25, f25, dyn, 0, 0, x3, 33*0 + 3*0*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f27, rs2==f31, rs3==f6, rd==f14,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f27; op2:f31; op3:f6; dest:f14; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64000fff; valaddr_reg:x3; val_offset:36*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f14, f27, f31, f6, dyn, 0, 0, x3, 36*0 + 3*0*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f17, rs2==f1, rs3==f0, rd==f30,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f17; op2:f1; op3:f0; dest:f30; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64001fff; valaddr_reg:x3; val_offset:39*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f30, f17, f1, f0, dyn, 0, 0, x3, 39*0 + 3*0*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f7, rs2==f16, rs3==f26, rd==f9,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f7; op2:f16; op3:f26; dest:f9; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64003fff; valaddr_reg:x3; val_offset:42*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f9, f7, f16, f26, dyn, 0, 0, x3, 42*0 + 3*0*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f26, rs2==f4, rs3==f9, rd==f16,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f26; op2:f4; op3:f9; dest:f16; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64007fff; valaddr_reg:x3; val_offset:45*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f16, f26, f4, f9, dyn, 0, 0, x3, 45*0 + 3*0*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f31, rs2==f26, rs3==f5, rd==f24,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f31; op2:f26; op3:f5; dest:f24; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x6400ffff; valaddr_reg:x3; val_offset:48*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f24, f31, f26, f5, dyn, 0, 0, x3, 48*0 + 3*0*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f4, rs2==f0, rs3==f1, rd==f8,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f4; op2:f0; op3:f1; dest:f8; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x6401ffff; valaddr_reg:x3; val_offset:51*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f8, f4, f0, f1, dyn, 0, 0, x3, 51*0 + 3*0*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f11, rs2==f28, rs3==f8, rd==f27,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f11; op2:f28; op3:f8; dest:f27; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x6403ffff; valaddr_reg:x3; val_offset:54*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f27, f11, f28, f8, dyn, 0, 0, x3, 54*0 + 3*0*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f5, rs2==f27, rs3==f19, rd==f26,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f5; op2:f27; op3:f19; dest:f26; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x6407ffff; valaddr_reg:x3; val_offset:57*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f26, f5, f27, f19, dyn, 0, 0, x3, 57*0 + 3*0*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f20, rs2==f19, rs3==f18, rd==f22,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f20; op2:f19; op3:f18; dest:f22; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x640fffff; valaddr_reg:x3; val_offset:60*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f22, f20, f19, f18, dyn, 0, 0, x3, 60*0 + 3*0*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f29, rs2==f8, rs3==f16, rd==f2,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f29; op2:f8; op3:f16; dest:f2; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x641fffff; valaddr_reg:x3; val_offset:63*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f2, f29, f8, f16, dyn, 0, 0, x3, 63*0 + 3*0*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f30, rs2==f17, rs3==f20, rd==f31,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f17; op3:f20; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x643fffff; valaddr_reg:x3; val_offset:66*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f17, f20, dyn, 0, 0, x3, 66*0 + 3*0*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f16, rs2==f10, rs3==f4, rd==f3,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f16; op2:f10; op3:f4; dest:f3; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64400000; valaddr_reg:x3; val_offset:69*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f3, f16, f10, f4, dyn, 0, 0, x3, 69*0 + 3*0*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f8, rs2==f22, rs3==f17, rd==f1,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f8; op2:f22; op3:f17; dest:f1; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64600000; valaddr_reg:x3; val_offset:72*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f1, f8, f22, f17, dyn, 0, 0, x3, 72*0 + 3*0*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f2, rs2==f7, rs3==f31, rd==f0,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f2; op2:f7; op3:f31; dest:f0; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64700000; valaddr_reg:x3; val_offset:75*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f0, f2, f7, f31, dyn, 0, 0, x3, 75*0 + 3*0*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f1, rs2==f24, rs3==f14, rd==f20,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f1; op2:f24; op3:f14; dest:f20; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x64780000; valaddr_reg:x3; val_offset:78*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f20, f1, f24, f14, dyn, 0, 0, x3, 78*0 + 3*0*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f9, rs2==f18, rs3==f24, rd==f6,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f9; op2:f18; op3:f24; dest:f6; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647c0000; valaddr_reg:x3; val_offset:81*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f6, f9, f18, f24, dyn, 0, 0, x3, 81*0 + 3*0*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f3, rs2==f20, rs3==f13, rd==f19,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f3; op2:f20; op3:f13; dest:f19; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647e0000; valaddr_reg:x3; val_offset:84*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f19, f3, f20, f13, dyn, 0, 0, x3, 84*0 + 3*0*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f18, rs2==f3, rs3==f21, rd==f13,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f18; op2:f3; op3:f21; dest:f13; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647f0000; valaddr_reg:x3; val_offset:87*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f13, f18, f3, f21, dyn, 0, 0, x3, 87*0 + 3*0*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f24, rs2==f13, rs3==f3, rd==f10,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f24; op2:f13; op3:f3; dest:f10; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647f8000; valaddr_reg:x3; val_offset:90*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f10, f24, f13, f3, dyn, 0, 0, x3, 90*0 + 3*0*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f19, rs2==f9, rs3==f28, rd==f7,fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f19; op2:f9; op3:f28; dest:f7; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647fc000; valaddr_reg:x3; val_offset:93*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f7, f19, f9, f28, dyn, 0, 0, x3, 93*0 + 3*0*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647fe000; valaddr_reg:x3; val_offset:96*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96*0 + 3*0*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ff000; valaddr_reg:x3; val_offset:99*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99*0 + 3*0*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ff800; valaddr_reg:x3; val_offset:102*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102*0 + 3*0*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ffc00; valaddr_reg:x3; val_offset:105*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105*0 + 3*0*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ffe00; valaddr_reg:x3; val_offset:108*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108*0 + 3*0*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647fff00; valaddr_reg:x3; val_offset:111*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111*0 + 3*0*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647fff80; valaddr_reg:x3; val_offset:114*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114*0 + 3*0*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647fffc0; valaddr_reg:x3; val_offset:117*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 117*0 + 3*0*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647fffe0; valaddr_reg:x3; val_offset:120*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 120*0 + 3*0*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ffff0; valaddr_reg:x3; val_offset:123*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 123*0 + 3*0*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ffff8; valaddr_reg:x3; val_offset:126*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 126*0 + 3*0*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ffffc; valaddr_reg:x3; val_offset:129*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 129*0 + 3*0*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647ffffe; valaddr_reg:x3; val_offset:132*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 132*0 + 3*0*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x647fffff; valaddr_reg:x3; val_offset:135*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 135*0 + 3*0*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f000001; valaddr_reg:x3; val_offset:138*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 138*0 + 3*0*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f000003; valaddr_reg:x3; val_offset:141*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 141*0 + 3*0*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f000007; valaddr_reg:x3; val_offset:144*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 144*0 + 3*0*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f199999; valaddr_reg:x3; val_offset:147*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 147*0 + 3*0*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f249249; valaddr_reg:x3; val_offset:150*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 150*0 + 3*0*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f333333; valaddr_reg:x3; val_offset:153*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 153*0 + 3*0*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:156*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 156*0 + 3*0*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:159*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 159*0 + 3*0*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f444444; valaddr_reg:x3; val_offset:162*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 162*0 + 3*0*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:165*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 165*0 + 3*0*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:168*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 168*0 + 3*0*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f666666; valaddr_reg:x3; val_offset:171*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 171*0 + 3*0*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:174*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 174*0 + 3*0*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:177*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 177*0 + 3*0*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:180*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 180*0 + 3*0*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x26140b and fs2 == 0 and fe2 == 0x89 and fm2 == 0x454df4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a26140b; op2val:0x44c54df4;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:183*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 183*0 + 3*0*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f800000; valaddr_reg:x3; val_offset:186*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 186*0 + 3*0*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f800001; valaddr_reg:x3; val_offset:189*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 189*0 + 3*0*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f800003; valaddr_reg:x3; val_offset:192*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 192*0 + 3*0*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f800007; valaddr_reg:x3; val_offset:195*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 195*0 + 3*0*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f80000f; valaddr_reg:x3; val_offset:198*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 198*0 + 3*0*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f80001f; valaddr_reg:x3; val_offset:201*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 201*0 + 3*0*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f80003f; valaddr_reg:x3; val_offset:204*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 204*0 + 3*0*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f80007f; valaddr_reg:x3; val_offset:207*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 207*0 + 3*0*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f8000ff; valaddr_reg:x3; val_offset:210*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 210*0 + 3*0*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f8001ff; valaddr_reg:x3; val_offset:213*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 213*0 + 3*0*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f8003ff; valaddr_reg:x3; val_offset:216*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 216*0 + 3*0*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f8007ff; valaddr_reg:x3; val_offset:219*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 219*0 + 3*0*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f800fff; valaddr_reg:x3; val_offset:222*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 222*0 + 3*0*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f801fff; valaddr_reg:x3; val_offset:225*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 225*0 + 3*0*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f803fff; valaddr_reg:x3; val_offset:228*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 228*0 + 3*0*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f807fff; valaddr_reg:x3; val_offset:231*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 231*0 + 3*0*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f80ffff; valaddr_reg:x3; val_offset:234*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 234*0 + 3*0*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f81ffff; valaddr_reg:x3; val_offset:237*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 237*0 + 3*0*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f83ffff; valaddr_reg:x3; val_offset:240*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 240*0 + 3*0*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f87ffff; valaddr_reg:x3; val_offset:243*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 243*0 + 3*0*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f8fffff; valaddr_reg:x3; val_offset:246*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 246*0 + 3*0*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2f9fffff; valaddr_reg:x3; val_offset:249*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 249*0 + 3*0*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fbfffff; valaddr_reg:x3; val_offset:252*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 252*0 + 3*0*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fc00000; valaddr_reg:x3; val_offset:255*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 255*0 + 3*0*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fe00000; valaddr_reg:x3; val_offset:258*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 258*0 + 3*0*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ff00000; valaddr_reg:x3; val_offset:261*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 261*0 + 3*0*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ff80000; valaddr_reg:x3; val_offset:264*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 264*0 + 3*0*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffc0000; valaddr_reg:x3; val_offset:267*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 267*0 + 3*0*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffe0000; valaddr_reg:x3; val_offset:270*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 270*0 + 3*0*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fff0000; valaddr_reg:x3; val_offset:273*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 273*0 + 3*0*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fff8000; valaddr_reg:x3; val_offset:276*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 276*0 + 3*0*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fffc000; valaddr_reg:x3; val_offset:279*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 279*0 + 3*0*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fffe000; valaddr_reg:x3; val_offset:282*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 282*0 + 3*0*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffff000; valaddr_reg:x3; val_offset:285*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 285*0 + 3*0*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffff800; valaddr_reg:x3; val_offset:288*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 288*0 + 3*0*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffffc00; valaddr_reg:x3; val_offset:291*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 291*0 + 3*0*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffffe00; valaddr_reg:x3; val_offset:294*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 294*0 + 3*0*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fffff00; valaddr_reg:x3; val_offset:297*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 297*0 + 3*0*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fffff80; valaddr_reg:x3; val_offset:300*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 300*0 + 3*0*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fffffc0; valaddr_reg:x3; val_offset:303*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 303*0 + 3*0*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fffffe0; valaddr_reg:x3; val_offset:306*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 306*0 + 3*0*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffffff0; valaddr_reg:x3; val_offset:309*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 309*0 + 3*0*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffffff8; valaddr_reg:x3; val_offset:312*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 312*0 + 3*0*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffffffc; valaddr_reg:x3; val_offset:315*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 315*0 + 3*0*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2ffffffe; valaddr_reg:x3; val_offset:318*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 318*0 + 3*0*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x2fffffff; valaddr_reg:x3; val_offset:321*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 321*0 + 3*0*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3f800001; valaddr_reg:x3; val_offset:324*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 324*0 + 3*0*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3f800003; valaddr_reg:x3; val_offset:327*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 327*0 + 3*0*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3f800007; valaddr_reg:x3; val_offset:330*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 330*0 + 3*0*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3f999999; valaddr_reg:x3; val_offset:333*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 333*0 + 3*0*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:336*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 336*0 + 3*0*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:339*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 339*0 + 3*0*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:342*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 342*0 + 3*0*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:345*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 345*0 + 3*0*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:348*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 348*0 + 3*0*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:351*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 351*0 + 3*0*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:354*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 354*0 + 3*0*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:357*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 357*0 + 3*0*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:360*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 360*0 + 3*0*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:363*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 363*0 + 3*0*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:366*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 366*0 + 3*0*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x1bc989 and fs2 == 0 and fe2 == 0x08 and fm2 == 0x52568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a9bc989; op2val:0x452568f;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:369*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 369*0 + 3*0*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72000000; valaddr_reg:x3; val_offset:372*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 372*0 + 3*0*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72000001; valaddr_reg:x3; val_offset:375*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 375*0 + 3*0*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72000003; valaddr_reg:x3; val_offset:378*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 378*0 + 3*0*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x2cfa4f and fs2 == 0 and fe2 == 0x87 and fm2 == 0x3d6f4a and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b2cfa4f; op2val:0x43bd6f4a;
op3val:0x72000007; valaddr_reg:x3; val_offset:381*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 381*0 + 3*0*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1677721601,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677721603,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677721615,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677721631,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677721663,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1677721727,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677725695,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677729791,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677737983,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677754367,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677787135,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677852671,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1677983743,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1678245887,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1678770175,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1679818751,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1681915903,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1681915904,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1684013056,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1685061632,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1685585920,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1685848064,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1685979136,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686044672,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686077440,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686093824,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686102016,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686106112,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686108160,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686109184,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686109696,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686109952,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110080,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110144,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110176,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110192,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110200,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110204,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110206,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(1686110207,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2049315851,32,FLEN)
NAN_BOXED(1153781236,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917760,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917761,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917763,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917767,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917775,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917791,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917823,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796917887,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796918015,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796918271,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796918783,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796919807,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796921855,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796925951,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796934143,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796950527,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(796983295,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(797048831,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(797179903,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(797442047,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(797966335,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(799014911,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(801112063,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(801112064,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(803209216,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(804257792,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(804782080,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805044224,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805175296,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805240832,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805273600,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805289984,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805298176,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805302272,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805304320,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805305344,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805305856,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306112,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306240,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306304,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306336,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306352,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306360,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306364,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306366,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(805306367,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2057030025,32,FLEN)
NAN_BOXED(72504975,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602624,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602625,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602627,32,FLEN)
NAN_BOXED(2066545231,32,FLEN)
NAN_BOXED(1136488266,32,FLEN)
NAN_BOXED(1912602631,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
