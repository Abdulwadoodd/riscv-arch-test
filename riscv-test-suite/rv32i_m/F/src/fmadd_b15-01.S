
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f23, rs2==f16, rs3==f25, rd==f16,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f23; op2:f16; op3:f25; dest:f16; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae800000; valaddr_reg:x3; val_offset:0*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f16, f23, f16, f25, dyn, 0, 0, x3, 0*0 + 3*0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 == rd, rs1==f22, rs2==f22, rs3==f22, rd==f22,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f22; op2:f22; op3:f22; dest:f22; op1val:0x7859914d; op2val:0x7859914d;
op3val:0x7859914d; valaddr_reg:x3; val_offset:3*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f22, f22, f22, f22, dyn, 0, 0, x3, 3*0 + 3*0*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f8, rs2==f8, rs3==f14, rd==f8,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f8; op2:f8; op3:f14; dest:f8; op1val:0x7859914d; op2val:0x7859914d;
op3val:0xae800003; valaddr_reg:x3; val_offset:6*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f8, f8, f8, f14, dyn, 0, 0, x3, 6*0 + 3*0*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f10, rs2==f5, rs3==f17, rd==f3,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f10; op2:f5; op3:f17; dest:f3; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae800007; valaddr_reg:x3; val_offset:9*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f3, f10, f5, f17, dyn, 0, 0, x3, 9*0 + 3*0*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f3, rs2==f3, rs3==f3, rd==f1,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f3; op2:f3; op3:f3; dest:f1; op1val:0x7859914d; op2val:0x7859914d;
op3val:0x7859914d; valaddr_reg:x3; val_offset:12*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f1, f3, f3, f3, dyn, 0, 0, x3, 12*0 + 3*0*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f29, rs2==f11, rs3==f5, rd==f29,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f29; op2:f11; op3:f5; dest:f29; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae80001f; valaddr_reg:x3; val_offset:15*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f29, f29, f11, f5, dyn, 0, 0, x3, 15*0 + 3*0*FLEN/8, x4, x1, x2)

inst_6:
// rd == rs2 == rs3 != rs1, rs1==f9, rs2==f7, rs3==f7, rd==f7,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f9; op2:f7; op3:f7; dest:f7; op1val:0x7859914d; op2val:0x86969c55;
op3val:0x86969c55; valaddr_reg:x3; val_offset:18*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f7, f9, f7, f7, dyn, 0, 0, x3, 18*0 + 3*0*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f30, rs2==f30, rs3==f11, rd==f9,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f30; op3:f11; dest:f9; op1val:0x7859914d; op2val:0x7859914d;
op3val:0xae80007f; valaddr_reg:x3; val_offset:21*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f9, f30, f30, f11, dyn, 0, 0, x3, 21*0 + 3*0*FLEN/8, x4, x1, x2)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f12, rs2==f0, rs3==f0, rd==f19,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f12; op2:f0; op3:f0; dest:f19; op1val:0x7859914d; op2val:0x86969c55;
op3val:0x86969c55; valaddr_reg:x3; val_offset:24*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f19, f12, f0, f0, dyn, 0, 0, x3, 24*0 + 3*0*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f31, rs2==f9, rs3==f31, rd==f31,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f31; op2:f9; op3:f31; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0x7859914d; valaddr_reg:x3; val_offset:27*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f31, f9, f31, dyn, 0, 0, x3, 27*0 + 3*0*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f24, rs2==f31, rs3==f24, rd==f28,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f24; op2:f31; op3:f24; dest:f28; op1val:0x7859914d; op2val:0x86969c55;
op3val:0x7859914d; valaddr_reg:x3; val_offset:30*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f28, f24, f31, f24, dyn, 0, 0, x3, 30*0 + 3*0*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f5, rs2==f1, rs3==f2, rd==f2,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f5; op2:f1; op3:f2; dest:f2; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae8007ff; valaddr_reg:x3; val_offset:33*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f2, f5, f1, f2, dyn, 0, 0, x3, 33*0 + 3*0*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f14, rs2==f24, rs3==f26, rd==f10,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f14; op2:f24; op3:f26; dest:f10; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae800fff; valaddr_reg:x3; val_offset:36*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f10, f14, f24, f26, dyn, 0, 0, x3, 36*0 + 3*0*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f7, rs2==f25, rs3==f4, rd==f6,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f7; op2:f25; op3:f4; dest:f6; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae801fff; valaddr_reg:x3; val_offset:39*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f6, f7, f25, f4, dyn, 0, 0, x3, 39*0 + 3*0*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f13, rs2==f20, rs3==f30, rd==f18,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f13; op2:f20; op3:f30; dest:f18; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae803fff; valaddr_reg:x3; val_offset:42*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f18, f13, f20, f30, dyn, 0, 0, x3, 42*0 + 3*0*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f6, rs2==f18, rs3==f20, rd==f14,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f6; op2:f18; op3:f20; dest:f14; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae807fff; valaddr_reg:x3; val_offset:45*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f14, f6, f18, f20, dyn, 0, 0, x3, 45*0 + 3*0*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f17, rs2==f12, rs3==f8, rd==f24,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f17; op2:f12; op3:f8; dest:f24; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae80ffff; valaddr_reg:x3; val_offset:48*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f24, f17, f12, f8, dyn, 0, 0, x3, 48*0 + 3*0*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f27, rs2==f29, rs3==f12, rd==f15,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f27; op2:f29; op3:f12; dest:f15; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae81ffff; valaddr_reg:x3; val_offset:51*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f15, f27, f29, f12, dyn, 0, 0, x3, 51*0 + 3*0*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f18, rs2==f4, rs3==f21, rd==f23,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f18; op2:f4; op3:f21; dest:f23; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae83ffff; valaddr_reg:x3; val_offset:54*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f23, f18, f4, f21, dyn, 0, 0, x3, 54*0 + 3*0*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f28, rs2==f21, rs3==f18, rd==f26,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f28; op2:f21; op3:f18; dest:f26; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae87ffff; valaddr_reg:x3; val_offset:57*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f26, f28, f21, f18, dyn, 0, 0, x3, 57*0 + 3*0*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f1, rs2==f2, rs3==f10, rd==f12,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f1; op2:f2; op3:f10; dest:f12; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae8fffff; valaddr_reg:x3; val_offset:60*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f12, f1, f2, f10, dyn, 0, 0, x3, 60*0 + 3*0*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f16, rs2==f10, rs3==f19, rd==f4,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f16; op2:f10; op3:f19; dest:f4; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xae9fffff; valaddr_reg:x3; val_offset:63*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f4, f16, f10, f19, dyn, 0, 0, x3, 63*0 + 3*0*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f20, rs2==f23, rs3==f6, rd==f30,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f20; op2:f23; op3:f6; dest:f30; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaebfffff; valaddr_reg:x3; val_offset:66*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f30, f20, f23, f6, dyn, 0, 0, x3, 66*0 + 3*0*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f15, rs2==f28, rs3==f16, rd==f11,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f15; op2:f28; op3:f16; dest:f11; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaec00000; valaddr_reg:x3; val_offset:69*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f11, f15, f28, f16, dyn, 0, 0, x3, 69*0 + 3*0*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f0, rs2==f26, rs3==f1, rd==f27,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f0; op2:f26; op3:f1; dest:f27; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaee00000; valaddr_reg:x3; val_offset:72*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f27, f0, f26, f1, dyn, 0, 0, x3, 72*0 + 3*0*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f25, rs2==f14, rs3==f28, rd==f21,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f25; op2:f14; op3:f28; dest:f21; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaef00000; valaddr_reg:x3; val_offset:75*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f21, f25, f14, f28, dyn, 0, 0, x3, 75*0 + 3*0*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f11, rs2==f13, rs3==f9, rd==f17,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f11; op2:f13; op3:f9; dest:f17; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaef80000; valaddr_reg:x3; val_offset:78*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f17, f11, f13, f9, dyn, 0, 0, x3, 78*0 + 3*0*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f21, rs2==f27, rs3==f15, rd==f5,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f21; op2:f27; op3:f15; dest:f5; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefc0000; valaddr_reg:x3; val_offset:81*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f5, f21, f27, f15, dyn, 0, 0, x3, 81*0 + 3*0*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f19, rs2==f6, rs3==f29, rd==f0,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f19; op2:f6; op3:f29; dest:f0; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefe0000; valaddr_reg:x3; val_offset:84*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f0, f19, f6, f29, dyn, 0, 0, x3, 84*0 + 3*0*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f4, rs2==f15, rs3==f13, rd==f25,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f4; op2:f15; op3:f13; dest:f25; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeff0000; valaddr_reg:x3; val_offset:87*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f25, f4, f15, f13, dyn, 0, 0, x3, 87*0 + 3*0*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f26, rs2==f19, rs3==f23, rd==f20,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f26; op2:f19; op3:f23; dest:f20; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeff8000; valaddr_reg:x3; val_offset:90*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f20, f26, f19, f23, dyn, 0, 0, x3, 90*0 + 3*0*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f2, rs2==f17, rs3==f27, rd==f13,fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f2; op2:f17; op3:f27; dest:f13; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeffc000; valaddr_reg:x3; val_offset:93*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f13, f2, f17, f27, dyn, 0, 0, x3, 93*0 + 3*0*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeffe000; valaddr_reg:x3; val_offset:96*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96*0 + 3*0*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefff000; valaddr_reg:x3; val_offset:99*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99*0 + 3*0*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefff800; valaddr_reg:x3; val_offset:102*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102*0 + 3*0*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefffc00; valaddr_reg:x3; val_offset:105*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105*0 + 3*0*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefffe00; valaddr_reg:x3; val_offset:108*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108*0 + 3*0*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeffff00; valaddr_reg:x3; val_offset:111*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111*0 + 3*0*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeffff80; valaddr_reg:x3; val_offset:114*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114*0 + 3*0*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeffffc0; valaddr_reg:x3; val_offset:117*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 117*0 + 3*0*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeffffe0; valaddr_reg:x3; val_offset:120*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 120*0 + 3*0*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefffff0; valaddr_reg:x3; val_offset:123*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 123*0 + 3*0*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefffff8; valaddr_reg:x3; val_offset:126*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 126*0 + 3*0*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefffffc; valaddr_reg:x3; val_offset:129*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 129*0 + 3*0*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaefffffe; valaddr_reg:x3; val_offset:132*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 132*0 + 3*0*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xaeffffff; valaddr_reg:x3; val_offset:135*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 135*0 + 3*0*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbf800001; valaddr_reg:x3; val_offset:138*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 138*0 + 3*0*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbf800003; valaddr_reg:x3; val_offset:141*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 141*0 + 3*0*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbf800007; valaddr_reg:x3; val_offset:144*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 144*0 + 3*0*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbf999999; valaddr_reg:x3; val_offset:147*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 147*0 + 3*0*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:150*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 150*0 + 3*0*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:153*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 153*0 + 3*0*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:156*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 156*0 + 3*0*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:159*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 159*0 + 3*0*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:162*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 162*0 + 3*0*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:165*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 165*0 + 3*0*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:168*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 168*0 + 3*0*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:171*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 171*0 + 3*0*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:174*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 174*0 + 3*0*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:177*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 177*0 + 3*0*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:180*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 180*0 + 3*0*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xf0 and fm1 == 0x59914d and fs2 == 1 and fe2 == 0x0d and fm2 == 0x169c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7859914d; op2val:0x86969c55;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:183*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 183*0 + 3*0*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:186*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 186*0 + 3*0*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:189*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 189*0 + 3*0*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:192*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 192*0 + 3*0*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:195*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 195*0 + 3*0*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:198*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 198*0 + 3*0*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:201*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 201*0 + 3*0*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:204*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 204*0 + 3*0*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:207*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 207*0 + 3*0*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:210*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 210*0 + 3*0*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:213*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 213*0 + 3*0*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:216*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 216*0 + 3*0*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:219*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 219*0 + 3*0*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:222*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 222*0 + 3*0*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:225*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 225*0 + 3*0*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:228*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 228*0 + 3*0*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:231*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 231*0 + 3*0*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81000000; valaddr_reg:x3; val_offset:234*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 234*0 + 3*0*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81000001; valaddr_reg:x3; val_offset:237*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 237*0 + 3*0*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81000003; valaddr_reg:x3; val_offset:240*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 240*0 + 3*0*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81000007; valaddr_reg:x3; val_offset:243*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 243*0 + 3*0*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8100000f; valaddr_reg:x3; val_offset:246*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 246*0 + 3*0*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8100001f; valaddr_reg:x3; val_offset:249*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 249*0 + 3*0*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8100003f; valaddr_reg:x3; val_offset:252*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 252*0 + 3*0*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8100007f; valaddr_reg:x3; val_offset:255*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 255*0 + 3*0*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x810000ff; valaddr_reg:x3; val_offset:258*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 258*0 + 3*0*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x810001ff; valaddr_reg:x3; val_offset:261*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 261*0 + 3*0*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x810003ff; valaddr_reg:x3; val_offset:264*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 264*0 + 3*0*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x810007ff; valaddr_reg:x3; val_offset:267*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 267*0 + 3*0*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81000fff; valaddr_reg:x3; val_offset:270*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 270*0 + 3*0*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81001fff; valaddr_reg:x3; val_offset:273*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 273*0 + 3*0*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81003fff; valaddr_reg:x3; val_offset:276*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 276*0 + 3*0*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81007fff; valaddr_reg:x3; val_offset:279*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 279*0 + 3*0*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8100ffff; valaddr_reg:x3; val_offset:282*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 282*0 + 3*0*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8101ffff; valaddr_reg:x3; val_offset:285*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 285*0 + 3*0*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8103ffff; valaddr_reg:x3; val_offset:288*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 288*0 + 3*0*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x8107ffff; valaddr_reg:x3; val_offset:291*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 291*0 + 3*0*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x810fffff; valaddr_reg:x3; val_offset:294*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 294*0 + 3*0*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x811fffff; valaddr_reg:x3; val_offset:297*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 297*0 + 3*0*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:300*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 300*0 + 3*0*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:303*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 303*0 + 3*0*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:306*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 306*0 + 3*0*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:309*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 309*0 + 3*0*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:312*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 312*0 + 3*0*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:315*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 315*0 + 3*0*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:318*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 318*0 + 3*0*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:321*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 321*0 + 3*0*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:324*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 324*0 + 3*0*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:327*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 327*0 + 3*0*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817fe000; valaddr_reg:x3; val_offset:330*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 330*0 + 3*0*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:333*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 333*0 + 3*0*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:336*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 336*0 + 3*0*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:339*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 339*0 + 3*0*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:342*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 342*0 + 3*0*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:345*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 345*0 + 3*0*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:348*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 348*0 + 3*0*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:351*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 351*0 + 3*0*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:354*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 354*0 + 3*0*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:357*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 357*0 + 3*0*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:360*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 360*0 + 3*0*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:363*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 363*0 + 3*0*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:366*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 366*0 + 3*0*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0xf4 and fm1 == 0x60affa and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a60affa; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:369*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 369*0 + 3*0*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea000000; valaddr_reg:x3; val_offset:372*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 372*0 + 3*0*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea000001; valaddr_reg:x3; val_offset:375*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 375*0 + 3*0*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea000003; valaddr_reg:x3; val_offset:378*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 378*0 + 3*0*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x3530a7 and fs2 == 1 and fe2 == 0x88 and fm2 == 0x34d948 and fs3 == 1 and fe3 == 0xd4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab530a7; op2val:0xc434d948;
op3val:0xea000007; valaddr_reg:x3; val_offset:381*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 381*0 + 3*0*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927624192,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2927624195,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927624199,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927624223,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2927624319,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927626239,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927628287,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927632383,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927640575,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927656959,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927689727,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927755263,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2927886335,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2928148479,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2928672767,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2929721343,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2931818495,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2931818496,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2933915648,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2934964224,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2935488512,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2935750656,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2935881728,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2935947264,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2935980032,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2935996416,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936004608,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936008704,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936010752,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936011776,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012288,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012544,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012672,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012736,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012768,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012784,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012792,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012796,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012798,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(2936012799,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2019135821,32,FLEN)
NAN_BOXED(2258017365,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260864,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260865,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260867,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260871,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260879,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260895,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260991,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261119,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261375,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261887,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164262911,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164264959,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164269055,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164277247,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164293631,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164326399,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164391935,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164523007,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164785151,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2165309439,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2166358015,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172641280,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2053156858,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868544,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868545,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868547,32,FLEN)
NAN_BOXED(2058694823,32,FLEN)
NAN_BOXED(3291797832,32,FLEN)
NAN_BOXED(3925868551,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
